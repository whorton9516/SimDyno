using SimDynoServer.Models;

namespace SimDynoServer.Utils;

/// <summary>
/// Registry of all available field parsers for ForzaData. Key is the field name as used by clients.
/// </summary>
public static class ParserRegistry
{
    // All available field parsers. Key: field name, Value: parser delegate.
    public static readonly Dictionary<string, Action<byte[], ForzaData>> AllParsers = new()
    {
        ["IsRaceOn"]                        = (packet, data) => data.IsRaceOn = packet.IsRaceOn(),
        ["TimeStampMS"]                     = (packet, data) => data.TimeStampMS = packet.TimestampMs(),
        ["EngineMaxRpm"]                    = (packet, data) => data.EngineMaxRpm = packet.EngineMaxRpm(),
        ["EngineIdleRpm"]                   = (packet, data) => data.EngineIdleRpm = packet.EngineIdleRpm(),
        ["CurrentEngineRpm"]                = (packet, data) => data.CurrentEngineRpm = packet.CurrentEngineRpm(),
        ["AccelerationX"]                   = (packet, data) => data.AccelerationX = packet.AccelerationX(),
        ["AccelerationY"]                   = (packet, data) => data.AccelerationY = packet.AccelerationY(),
        ["AccelerationZ"]                   = (packet, data) => data.AccelerationZ = packet.AccelerationZ(),
        ["VelocityX"]                       = (packet, data) => data.VelocityX = packet.VelocityX(),
        ["VelocityY"]                       = (packet, data) => data.VelocityY = packet.VelocityY(),
        ["VelocityZ"]                       = (packet, data) => data.VelocityZ = packet.VelocityZ(),
        ["AngularVelocityX"]                = (packet, data) => data.AngularVelocityX = packet.AngularVelocityX(),
        ["AngularVelocityY"]                = (packet, data) => data.AngularVelocityY = packet.AngularVelocityY(),
        ["AngularVelocityZ"]                = (packet, data) => data.AngularVelocityZ = packet.AngularVelocityZ(),
        ["Yaw"]                             = (packet, data) => data.Yaw = packet.Yaw(),
        ["Pitch"]                           = (packet, data) => data.Pitch = packet.Pitch(),
        ["Roll"]                            = (packet, data) => data.Roll = packet.Roll(),
        ["NormalizedSuspensionTravelFL"]    = (packet, data) => data.NormalizedSuspensionTravelFL = packet.NormalizedSuspensionTravelFL(),
        ["NormalizedSuspensionTravelFR"]    = (packet, data) => data.NormalizedSuspensionTravelFR = packet.NormalizedSuspensionTravelFR(),
        ["NormalizedSuspensionTravelRL"]    = (packet, data) => data.NormalizedSuspensionTravelRL = packet.NormalizedSuspensionTravelRL(),
        ["NormalizedSuspensionTravelRR"]    = (packet, data) => data.NormalizedSuspensionTravelRR = packet.NormalizedSuspensionTravelRR(),
        ["TireSlipRatioFL"]                 = (packet, data) => data.TireSlipRatioFL = packet.TireSlipRatioFL(),
        ["TireSlipRatioFR"]                 = (packet, data) => data.TireSlipRatioFR = packet.TireSlipRatioFR(),
        ["TireSlipRatioRL"]                 = (packet, data) => data.TireSlipRatioRL = packet.TireSlipRatioRL(),
        ["TireSlipRatioRR"]                 = (packet, data) => data.TireSlipRatioRR = packet.TireSlipRatioRR(),
        ["WheelRotationSpeedFL"]            = (packet, data) => data.WheelRotationSpeedFL = packet.WheelRotationSpeedFL(),
        ["WheelRotationSpeedFR"]            = (packet, data) => data.WheelRotationSpeedFR = packet.WheelRotationSpeedFR(),
        ["WheelRotationSpeedRL"]            = (packet, data) => data.WheelRotationSpeedRL = packet.WheelRotationSpeedRL(),
        ["WheelRotationSpeedRR"]            = (packet, data) => data.WheelRotationSpeedRR = packet.WheelRotationSpeedRR(),
        ["WheelOnRumbleStripFL"]            = (packet, data) => data.WheelOnRumbleStripFL = packet.WheelOnRumbleStripFL(),
        ["WheelOnRumbleStripFR"]            = (packet, data) => data.WheelOnRumbleStripFR = packet.WheelOnRumbleStripFR(),
        ["WheelOnRumbleStripRL"]            = (packet, data) => data.WheelOnRumbleStripRL = packet.WheelOnRumbleStripRL(),
        ["WheelOnRumbleStripRR"]            = (packet, data) => data.WheelOnRumbleStripRR = packet.WheelOnRumbleStripRR(),
        ["WheelInPuddleDepthFL"]            = (packet, data) => data.WheelInPuddleDepthFL = packet.WheelInPuddleFL(),
        ["WheelInPuddleDepthFR"]            = (packet, data) => data.WheelInPuddleDepthFR = packet.WheelInPuddleFR(),
        ["WheelInPuddleDepthRL"]            = (packet, data) => data.WheelInPuddleDepthRL = packet.WheelInPuddleRL(),
        ["WheelInPuddleDepthRR"]            = (packet, data) => data.WheelInPuddleDepthRR = packet.WheelInPuddleRR(),
        ["SurfaceRumbleFL"]                 = (packet, data) => data.SurfaceRumbleFL = packet.SurfaceRumbleFL(),
        ["SurfaceRumbleFR"]                 = (packet, data) => data.SurfaceRumbleFR = packet.SurfaceRumbleFR(),
        ["SurfaceRumbleRL"]                 = (packet, data) => data.SurfaceRumbleRL = packet.SurfaceRumbleRL(),
        ["SurfaceRumbleRR"]                 = (packet, data) => data.SurfaceRumbleRR = packet.SurfaceRumbleRR(),
        ["TireSlipAngleFL"]                 = (packet, data) => data.TireSlipAngleFL = packet.TireSlipAngleFL(),
        ["TireSlipAngleFR"]                 = (packet, data) => data.TireSlipAngleFR = packet.TireSlipAngleFR(),
        ["TireSlipAngleRL"]                 = (packet, data) => data.TireSlipAngleRL = packet.TireSlipAngleRL(),
        ["TireSlipAngleRR"]                 = (packet, data) => data.TireSlipAngleRR = packet.TireSlipAngleRR(),
        ["TireCombinedSlipFL"]              = (packet, data) => data.TireCombinedSlipFL = packet.TireCombinedSlipFL(),
        ["TireCombinedSlipFR"]              = (packet, data) => data.TireCombinedSlipFR = packet.TireCombinedSlipFR(),
        ["TireCombinedSlipRL"]              = (packet, data) => data.TireCombinedSlipRL = packet.TireCombinedSlipRL(),
        ["TireCombinedSlipRR"]              = (packet, data) => data.TireCombinedSlipRR = packet.TireCombinedSlipRR(),
        ["SuspensionTravelMetersFL"]        = (packet, data) => data.SuspensionTravelMetersFL = packet.SuspensionTravelMetersFL(),
        ["SuspensionTravelMetersFR"]        = (packet, data) => data.SuspensionTravelMetersFR = packet.SuspensionTravelMetersFR(),
        ["SuspensionTravelMetersRL"]        = (packet, data) => data.SuspensionTravelMetersRL = packet.SuspensionTravelMetersRL(),
        ["SuspensionTravelMetersRR"]        = (packet, data) => data.SuspensionTravelMetersRR = packet.SuspensionTravelMetersRR(),
        ["CarOrdinal"]                      = (packet, data) => data.CarOrdinal = packet.CarOrdinal(),
        ["CarClass"]                        = (packet, data) => data.CarClass = packet.CarClass(),
        ["CarPerformanceIndex"]             = (packet, data) => data.CarPerformanceIndex = packet.CarPerformanceIndex(),
        ["DrivetrainType"]                  = (packet, data) => data.DrivetrainType = packet.DriveTrain(),
        ["NumCylinders"]                    = (packet, data) => data.NumCylinders = packet.NumCylinders(),
        ["PositionX"]                       = (packet, data) => data.PositionX = packet.PositionX(),
        ["PositionY"]                       = (packet, data) => data.PositionY = packet.PositionY(),
        ["PositionZ"]                       = (packet, data) => data.PositionZ = packet.PositionZ(),
        ["Speed"]                           = (packet, data) => data.Speed = packet.Speed(),
        ["SpeedMPH"]                        = (packet, data) => data.SpeedMPH = MathF.Round(packet.Speed() * 2.23694f),
        ["SpeedKPH"]                        = (packet, data) => data.SpeedKPH = MathF.Round(packet.Speed() * 3.6f),
        ["Power"]                           = (packet, data) => data.Power = packet.Power(),
        ["Torque"]                          = (packet, data) => data.Torque = packet.Torque(),
        ["TireTempFL"]                      = (packet, data) => data.TireTempFL = packet.TireTempFL(),
        ["TireTempFR"]                      = (packet, data) => data.TireTempFR = packet.TireTempFR(),
        ["TireTempRL"]                      = (packet, data) => data.TireTempRL = packet.TireTempRL(),
        ["TireTempRR"]                      = (packet, data) => data.TireTempRR = packet.TireTempRR(),
        ["Boost"]                           = (packet, data) => data.Boost = packet.Boost(),
        ["Fuel"]                            = (packet, data) => data.Fuel = packet.Fuel(),
        ["Distance"]                        = (packet, data) => data.Distance = packet.Distance(),
        ["BestLapTime"]                     = (packet, data) => data.BestLapTime = packet.BestLapTime(),
        ["LastLapTime"]                     = (packet, data) => data.LastLapTime = packet.LastLapTime(),
        ["CurrentLapTime"]                  = (packet, data) => data.CurrentLapTime = packet.CurrentLapTime(),
        ["CurrentRaceTime"]                 = (packet, data) => data.CurrentRaceTime = packet.CurrentRaceTime(),
        ["LapNumber"]                       = (packet, data) => data.LapNumber = packet.LapNumber(),
        ["RacePosition"]                    = (packet, data) => data.RacePosition = packet.RacePosition(),
        ["Accelerator"]                     = (packet, data) => data.Accelerator = packet.Accelerator(),
        ["Brake"]                           = (packet, data) => data.Brake = packet.Brake(),
        ["Clutch"]                          = (packet, data) => data.Clutch = packet.Clutch(),
        ["Handbrake"]                       = (packet, data) => data.Handbrake = packet.Handbrake(),
        ["Gear"]                            = (packet, data) => data.Gear = packet.Gear(),
        ["Steer"]                           = (packet, data) => data.Steer = packet.Steer(),
        ["NormalizedDrivingLine"]           = (packet, data) => data.NormalizedDrivingLine = packet.NormalizedDrivingLine(),
        ["NormalizedAiBrakeDifference"]     = (packet, data) => data.NormalizedAiBrakeDifference = packet.NormalizedAiBrakeDifference(),
        ["TireWearFL"]                      = (packet, data) => data.TireWearFL = packet.TireWearFL(),
        ["TireWearFR"]                      = (packet, data) => data.TireWearFR = packet.TireWearFR(),
        ["TireWearRL"]                      = (packet, data) => data.TireWearRL = packet.TireWearRL(),
        ["TireWearRR"]                      = (packet, data) => data.TireWearRR = packet.TireWearRR(),
        ["TrackOrdinal"]                    = (packet, data) => data.TrackOrdinal = packet.TrackOrdinal(),
        // Add Additional Parsers here if needed
    };
}
